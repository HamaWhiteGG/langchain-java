prompt.chat.system.prefix=Answer the following questions as best you can. You have access to the following tools:
prompt.chat.system.suffix=Begin! Reminder to always use the exact characters `Final Answer` when responding.
prompt.chat.format.instructions=The way you use the tools is by specifying a json blob.\
  Specifically, this json should have a `action` key (with the name of the tool to use) and a `action_input` key (with the input to the tool going here).\
  \
  The only values that should be in the "action" field are: {tool_names}\
  \
  The $JSON_BLOB should only contain a SINGLE action, do NOT return a list of multiple actions. Here is an example of a valid $JSON_BLOB:\
  ```\
  {{{{\
  "action": $TOOL_NAME,\
  "action_input": $INPUT\
  }}}}\
  ```\
  ALWAYS use the following format:\
  Question: the input question you must answer\
  Thought: you should always think about what to do\
  Action:\
  ```\
  $JSON_BLOB\
  ```\
  Observation: the result of the action\
  ... (this Thought/Action/Observation can repeat N times)\
  Thought: I now know the final answer\
  Final Answer: the final answer to the original input question

prompt.mrkl.prefix=Answer the following questions as best you can. You have access to the following tools:
prompt.mrkl.format.instructions=Use the following format:\
  \
  Question: the input question you must answer\
  Thought: you should always think about what to do\
  Action: the action to take, should be one of [{tool_names}]\
  Action Input: the input to the action\
  Observation: the result of the action\
  ... (this Thought/Action/Action Input/Observation can repeat N times)\
  Thought: I now know the final answer\
  Final Answer: the final answer to the original input question
prompt.mrkl.suffix=Begin!\
  \
  Question: {input}\
  Thought:{agent_scratchpad}

prompt.open.meter.docs=\
  \
  BASE URL: https://api.open-meteo.com/\
  \
  API Documentation\
  The API endpoint /v1/forecast accepts a geographical coordinate, a list of weather variables and responds with a JSON hourly weather forecast for 7 days. Time always starts at 0:00 today and contains 168 hours. All URL parameters are listed below:\
  \
  Parameter	Format	Required	Default	Description\
  latitude, longitude	Floating point	Yes		Geographical WGS84 coordinate of the location\
  hourly	String array	No		A list of weather variables which should be returned. Values can be comma separated, or multiple &hourly= parameter in the URL can be used.\
  daily	String array	No		A list of daily weather variable aggregations which should be returned. Values can be comma separated, or multiple &daily= parameter in the URL can be used. If daily weather variables are specified, parameter timezone is required.\
  current_weather	Bool	No	false	Include current weather conditions in the JSON output.\
  temperature_unit	String	No	celsius	If fahrenheit is set, all temperature values are converted to Fahrenheit.\
  windspeed_unit	String	No	kmh	Other wind speed speed units: ms, mph and kn\
  precipitation_unit	String	No	mm	Other precipitation amount units: inch\
  timeformat	String	No	iso8601	If format unixtime is selected, all time values are returned in UNIX epoch time in seconds. Please note that all timestamp are in GMT+0! For daily values with unix timestamps, please apply utc_offset_seconds again to get the correct date.\
  timezone	String	No	GMT	If timezone is set, all timestamps are returned as local-time and data is returned starting at 00:00 local-time. Any time zone name from the time zone database is supported. If auto is set as a time zone, the coordinates will be automatically resolved to the local time zone.\
  past_days	Integer (0-2)	No	0	If past_days is set, yesterday or the day before yesterday data are also returned.\
  start_date\
  end_date	String (yyyy-mm-dd)	No		The time interval to get weather data. A day must be specified as an ISO8601 date (e.g. 2022-06-30).\
  models	String array	No	auto	Manually select one or more weather models. Per default, the best suitable weather models will be combined.\
  \
  Hourly Parameter Definition\
  The parameter &hourly= accepts the following values. Most weather variables are given as an instantaneous value for the indicated hour. Some variables like precipitation are calculated from the preceding hour as an average or sum.\
  \
  Variable	Valid time	Unit	Description\
  temperature_2m	Instant	°C (°F)	Air temperature at 2 meters above ground\
  snowfall	Preceding hour sum	cm (inch)	Snowfall amount of the preceding hour in centimeters. For the water equivalent in millimeter, divide by 7. E.g. 7 cm snow = 10 mm precipitation water equivalent\
  rain	Preceding hour sum	mm (inch)	Rain from large scale weather systems of the preceding hour in millimeter\
  showers	Preceding hour sum	mm (inch)	Showers from convective precipitation in millimeters from the preceding hour\
  weathercode	Instant	WMO code	Weather condition as a numeric code. Follow WMO weather interpretation codes. See table below for details.\
  snow_depth	Instant	meters	Snow depth on the ground\
  freezinglevel_height	Instant	meters	Altitude above sea level of the 0°C level\
  visibility	Instant	meters	Viewing distance in meters. Influenced by low clouds, humidity and aerosols. Maximum visibility is approximately 24 km.
prompt.api.url.template=\
  You are given the below API Documentation:\
  {api_docs}\
  Using this documentation, generate the full API url to call for answering the user question.\
  You should build the API url in order to get a response that is as short as possible, while still getting the necessary information to answer the question. Pay attention to deliberately exclude any unnecessary pieces of data in the API call.\
  \
  Question:{question}\
  API url:
prompt.api.response.template=\
  {api_url}\
  \
  Here is the response from the API:\
  \
  {api_response}\
  \
  Summarize this response to answer the original question.\
  \
  Summary:

prompt.chain.chat.template=\
  \
  The following is a friendly conversation between a human and an AI. The AI is talkative and provides lots of specific details from its context. If the AI does not know the answer to a question, it truthfully says it does not know.\
  \
  Current conversation:\
  {history}\
  Human: {input}\
  AI:

prompt.chain.match.template=\
  \
  Translate a math problem into a expression that can be executed using Python's numexpr library. Use the output of running this code to answer the question.\
  \
  Question: ${{Question with math problem.}}\
  ```text\
  ${{single line mathematical expression that solves the problem}}\
  ```\
  ...numexpr.evaluate(text)...\
  ```output\
  ${{Output of running the code}}\
  ```\
  Answer: ${{Answer}}\
  \
  Begin.\
  \
  Question: What is 37593 * 67?\
  ```text\
  37593 * 67\
  ```\
  ...numexpr.evaluate("37593 * 67")...\
  ```output\
  2518731\
  ```\
  Answer: 2518731\
  \
  Question: 37593^(1/5)\
  \
  ```text\
  37593**(1/5)\
  ```\
  ...numexpr.evaluate("37593**(1/5)")...\
  ```output\
  8.222831614237718\
  ```\
  Answer: 8.222831614237718\
  \
  Question: {question}

prompt.chain.query.template=\
  ```json\
  {\
  "content": "Lyrics of a song",\
  "attributes": {\
  "artist": {\
  "type": "string",\
  "description": "Name of the song artist"\
  },\
  "length": {\
  "type": "integer",\
  "description": "Length of the song in seconds"\
  },\
  "genre": {\
  "type": "string",\
  "description": "The song genre, one of "pop", "rock" or "rap""\
  }\
  }\
  }\
  ```
prompt.chain.full.answer=\
  ```json\
  {{\
  "query": "teenager love",\
  "filter": "and(or(eq(\"artist\", \"Taylor Swift\"), eq(\"artist\", \"Katy Perry\")),\
  lt(\"length\", 180), eq(\"genre\", \"pop\"))"\
  }}\
  ```
prompt.chain.filter.answer=\
  ```json\
  {{\
  "query": "",\
  "filter": "NO_FILTER"\
  }}\
  ```
prompt.chain.limit.answer=\
  ```json\
  {{\
  "query": "love",\
  "filter": "NO_FILTER",\
  "limit": 2\
  }}\
  ```
prompt.chain.example.template=\
  << Example {i}. >>\
  Data Source:\
  {data_source}\
  \
  User Query:\
  {user_query}\
  \
  Structured Request:\
  {structured_request}
prompt.chain.default.schema=\
  \
  << Structured Request Schema >>\
  When responding use a markdown code snippet with a JSON object formatted in the\
  following schema:\
  \
  ```json\
  {{{{\
  "query": string \ text string to compare to document contents\
  "filter": string \ logical condition statement for filtering documents\
  }}}}\
  ```\
  \
  The query string should contain only text that is expected to match the contents of\
  documents. Any conditions in the filter should not be mentioned in the query as well.\
  \
  A logical condition statement is composed of one or more comparison and logical\
  operation statements.\
  \
  A comparison statement takes the form: `comp(attr, val)`:\
  - `comp` ({allowed_comparators}): comparator\
  - `attr` (string):  name of attribute to apply the comparison to\
  - `val` (string): is the comparison value\
  \
  A logical operation statement takes the form `op(statement1, statement2, ...)`:\
  - `op` ({allowed_operators}): logical operator\
  - `statement1`, `statement2`, ... (comparison statements or logical operation\
  statements): one or more statements to apply the operation to\
  \
  Make sure that you only use the comparators and logical operators listed above and\
  no others.\
  Make sure that filters only refer to attributes that exist in the data source.\
  Make sure that filters only use the attributed names with its function names if there are functions applied on them.\
  Make sure that filters only use format `YYYY-MM-DD` when handling timestamp data typed values.\
  Make sure that filters take into account the descriptions of attributes and only make\
  comparisons that are feasible given the type of data being stored.\
  Make sure that filters are only used as needed. If there are no filters that should be\
  applied return "NO_FILTER" for the filter value.
prompt.chain.scheme.limit=\
  \
  << Structured Request Schema >>\
  When responding use a markdown code snippet with a JSON object formatted in the\
  following schema:\
  \
  ```json\
  {{{{\
  "query": string \ text string to compare to document contents\
  "filter": string \ logical condition statement for filtering documents\
  "limit": int \ the number of documents to retrieve\
  }}}}\
  ```\
  \
  The query string should contain only text that is expected to match the contents of\
  documents. Any conditions in the filter should not be mentioned in the query as well.\
  \
  A logical condition statement is composed of one or more comparison and logical\
  operation statements.\
  \
  A comparison statement takes the form: `comp(attr, val)`:\
  - `comp` ({allowed_comparators}): comparator\
  - `attr` (string):  name of attribute to apply the comparison to\
  - `val` (string): is the comparison value\
  \
  A logical operation statement takes the form `op(statement1, statement2, ...)`:\
  - `op` ({allowed_operators}): logical operator\
  - `statement1`, `statement2`, ... (comparison statements or logical operation\
  statements): one or more statements to apply the operation to\
  \
  Make sure that you only use the comparators and logical operators listed above and\
  no others.\
  Make sure that filters only refer to attributes that exist in the data source.\
  Make sure that filters only use the attributed names with its function names if there are functions applied on them.\
  Make sure that filters only use format `YYYY-MM-DD` when handling timestamp data typed values.\
  Make sure that filters take into account the descriptions of attributes and only make\
  comparisons that are feasible given the type of data being stored.\
  Make sure that filters are only used as needed. If there are no filters that should be\
  applied return "NO_FILTER" for the filter value.\
  Make sure the `limit` is always an int value. It is an optional parameter so leave it blank if it is does not make sense.
prompt.chain.default.prefix=\
  Your goal is to structure the user's query to match the request schema provided below.\
  \
  {schema}
prompt.chain.default.suffix=\
  << Example {i}. >>\
  Data Source:\
  ```json\
  {{{{\
  "content": "{content}",\
  "attributes": {attributes}\
  }}}}\
  ```\
  \
  User Query:\
  \
  {{query}}\
  \
  Structured Request:
prompt.chain.staff.template=\
  Use the following pieces of context to answer the question at the end. If you don't know the answer, just say that you don't know, don't try to make up an answer.\
  \
  {context}\
  \
  Question: {question}\
  \
  Helpful Answer:
prompt.chain.staff.system.template=\
  Use the following pieces of context to answer the users question.\
  If you don't know the answer, just say that you don't know, don't try to make up an answer.\
  ----------------\
  {context}

prompt.chain.retrieval.template=\
  \
  Use the following pieces of context to answer the question at the end. If you don't know the answer, just say that you don't know, don't try to make up an answer.\
  \
  {context}\
  \
  Question: {question}\
  \
  Helpful Answer:

prompt.chain.summary.mapreduce.template=\
  Write a concise summary of the following:\
  \
  "{text}"\
  \
  CONCISE SUMMARY:

prompt.chain.summary.refine.template=\
  Your job is to produce a final summary\
  We have provided an existing summary up to a certain point: {existing_answer}\
  We have the opportunity to refine the existing summary\
  (only if needed) with some more context below.\
  ------------\
  {text}\
  ------------\
  Given the new context, refine the original summary\
  If the context isn't useful, return the original summary.

prompt.chain.summary.refine.default=\
  Write a concise summary of the following:\
  \
  "{text}"\
  \
  CONCISE SUMMARY:

prompt.chain.summary.stuff.template=\
  Write a concise summary of the following:\
  \
  "{text}"\
  \
  CONCISE SUMMARY:

prompt.suffix=Only use the following tables: {table_info} Question: {input}
prompt.default.template=Given an input question, first create a syntactically correct {dialect} query to run, then look at the results of the query and return the answer. Unless the user specifies in his question a specific number of examples he wishes to obtain, always limit your query to at most {top_k} results. You can order the results by a relevant column to return the most interesting examples in the database. \n \
Never query for all the columns from a specific table, only ask for a the few relevant columns given the question. \n \
Pay attention to use only the column names that you can see in the schema description. Be careful to not query for columns that do not exist. Also, pay attention to which column is in which table. \n \
Use the following format: \n \
Question: Question here \n \
SQLQuery: SQL Query to run \n \
SQLResult: Result of the SQLQuery \n \
Answer: Final answer here
prompt.decider.template=Given the below input question and list of potential tables, output a comma separated list of the table names that may be necessary to answer this question.\
Question: {query} \n \
Table Names: {table_names} \n \
Relevant Table Names:

prompt.database.mysql=You are a MySQL expert. Given an input question, first create a syntactically correct MySQL query to run, then look at the results of the query and return the answer to the input question. \n \
Unless the user specifies in the question a specific number of examples to obtain, query for at most {top_k} results using the LIMIT clause as per MySQL. You can order the results to return the most informative data in the database. \n \
Never query for all columns from a table. You must query only the columns that are needed to answer the question. Wrap each column name in backticks (`) to denote them as delimited identifiers. \n \
Pay attention to use only the column names you can see in the tables below. Be careful to not query for columns that do not exist. Also, pay attention to which column is in which table. \n \
Pay attention to use CURDATE() function to get the current date, if the question involves "today". \n \
Use the following format: \n \
Question: Question here \n \
SQLQuery: SQL Query to run \n \
SQLResult: Result of the SQLQuery \n \
Answer: Final answer here 

prompt.database.h2=You are a H2 expert. Given an input question, first create a syntactically correct H2 query to run, then look at the results of the query and return the answer to the input question. \n \
Unless the user specifies in the question a specific number of examples to obtain, query for at most {top_k} results using the LIMIT clause as per H2. You can order the results to return the most informative data in the database. \n \
Never query for all columns from a table. You must query only the columns that are needed to answer the question. Wrap each column name in backticks (`) to denote them as delimited identifiers. \n \
Pay attention to use only the column names you can see in the tables below. Be careful to not query for columns that do not exist. Also, pay attention to which column is in which table. \n \
Pay attention to use CURDATE() function to get the current date, if the question involves "today". \n \
Use the following format: \n \
Question: Question here \n \
SQLQuery: SQL Query to run \n \
SQLResult: Result of the SQLQuery \n \
Answer: Final answer here

prompt.database.mariadb=You are a MariaDB expert. Given an input question, first create a syntactically correct MariaDB query to run, then look at the results of the query and return the answer to the input question. \n \
Unless the user specifies in the question a specific number of examples to obtain, query for at most {top_k} results using the LIMIT clause as per MariaDB. You can order the results to return the most informative data in the database. \n \
Never query for all columns from a table. You must query only the columns that are needed to answer the question. Wrap each column name in backticks (`) to denote them as delimited identifiers. \n \
Pay attention to use only the column names you can see in the tables below. Be careful to not query for columns that do not exist. Also, pay attention to which column is in which table. \n \
Pay attention to use CURDATE() function to get the current date, if the question involves "today". \n \
Use the following format: \n \
Question: Question here \n \
SQLQuery: SQL Query to run \n \
SQLResult: Result of the SQLQuery \n \
Answer: Final answer here

prompt.database.oracle=You are an Oracle SQL expert. Given an input question, first create a syntactically correct Oracle SQL query to run, then look at the results of the query and return the answer to the input question. \n \
Unless the user specifies in the question a specific number of examples to obtain, query for at most {top_k} results using the FETCH FIRST n ROWS ONLY clause as per Oracle SQL. You can order the results to return the most informative data in the database. \n \
Never query for all columns from a table. You must query only the columns that are needed to answer the question. Wrap each column name in double quotes (") to denote them as delimited identifiers. \n \
Pay attention to use only the column names you can see in the tables below. Be careful to not query for columns that do not exist. Also, pay attention to which column is in which table. \n \
Pay attention to use TRUNC(SYSDATE) function to get the current date, if the question involves "today". \n \
Use the following format: \n \
Question: Question here \n \
SQLQuery: SQL Query to run \n \
SQLResult: Result of the SQLQuery \n \
Answer: Final answer here

prompt.database.postgres=You are a PostgreSQL expert. Given an input question, first create a syntactically correct PostgreSQL query to run, then look at the results of the query and return the answer to the input question. \n \
Unless the user specifies in the question a specific number of examples to obtain, query for at most {top_k} results using the LIMIT clause as per PostgreSQL. You can order the results to return the most informative data in the database.\
Never query for all columns from a table. You must query only the columns that are needed to answer the question. Wrap each column name in double quotes (") to denote them as delimited identifiers.\
Pay attention to use only the column names you can see in the tables below. Be careful to not query for columns that do not exist. Also, pay attention to which column is in which table.\
Pay attention to use CURRENT_DATE function to get the current date, if the question involves "today".\
Use the following format:\
Question: Question here\
SQLQuery: SQL Query to run\
SQLResult: Result of the SQLQuery\
Answer: Final answer here

prompt.database.sqlite=You are a SQLite expert. Given an input question, first create a syntactically correct SQLite query to run, then look at the results of the query and return the answer to the input question. \n \
Unless the user specifies in the question a specific number of examples to obtain, query for at most {top_k} results using the LIMIT clause as per SQLite. You can order the results to return the most informative data in the database. \n \
Never query for all columns from a table. You must query only the columns that are needed to answer the question. Wrap each column name in double quotes (") to denote them as delimited identifiers. \n \
Pay attention to use only the column names you can see in the tables below. Be careful to not query for columns that do not exist. Also, pay attention to which column is in which table. \n \
Pay attention to use date('now') function to get the current date, if the question involves "today". \n \
Use the following format: \n \
Question: Question here \n \
SQLQuery: SQL Query to run \n \
SQLResult: Result of the SQLQuery \n \
Answer: Final answer here

